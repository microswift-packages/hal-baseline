/// Namespace for TWI status codes.
public enum TwiStatus {}

extension TwiStatus {
  // | Status Code (TWSR) | Status of the 2-wire Serial Bus and 2-wire Serial Interface Hardware  | Application Software Response    | Next Action Taken by TWI Hardware                                                                                                                                                                                                                                  | To/from TWDR | To TWCR | STA  | STO  | TWINT | TWEA |
  // |--------------------|-----------------------------------------------------------------------|----------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------|---------|------|------|-------|------|
  // | `0x08`             | A START condition has been transmitted                                | Load SLA+W                       | SLA+W will be transmitted; ACK or NOT ACK will be received                                                                                                                                                                                                         | -            | -       | 0    | 0    | 1     | X    |
  // | `0x10`             | A repeated START condition has been transmitted                       | Load SLA+W or Load SLA+R         | SLA+W will be transmitted; ACK or NOT ACK will be received SLA+R will be transmitted; Logic will switch to master receiver mode                                                                                                                                    | -            | -       | 0    | 0    | 1     | X    |

  /// A list of statuses common to both Master Transmit and Receive modes.
  public enum Master: UInt8 {
    /// A START condition has been transmitted. Load SLA+W. SLA+W will be transmitted; ACK or NOT ACK will be received.
    case startConditionTransmitted = 0x08
    /// A repeated START condition has been transmitted. Load SLA+W or Load SLA+R. SLA+W will be transmitted; ACK or NOT ACK will be received. SLA+R will be transmitted; Logic will switch to master receiver mode.
    case repeatedStartConditionTransmitted = 0x10
  }

  // | Status Code (TWSR) | Status of the 2-wire Serial Bus and 2-wire Serial Interface Hardware  | Application Software Response    | Next Action Taken by TWI Hardware                                                                                                                                                                                                                                  | To/from TWDR | To TWCR | STA  | STO  | TWINT | TWEA |
  // | `0x18`             | SLA+W has been transmitted; ACK has been received                     | Load data byte or No TWDR action | Data byte will be transmitted and ACK or NOT ACK will be received Repeated START will be transmitted STOP condition will be transmitted and TWSTO Flag will be reset STOP condition followed by a START condition will be transmitted and TWSTO flag will be reset | -            | -       | 0/1  | 0/1  | 1     | X    |
  // | `0x20`             | SLA+W has been transmitted; NOT ACK has been received                 | Load data byte or No TWDR action | Data byte will be transmitted and ACK or NOT ACK will be received Repeated START will be transmitted STOP condition will be transmitted and TWSTO flag will be reset STOP condition followed by a START condition will be transmitted and TWSTO flag will be reset | -            | -       | 0/1  | 0/1  | 1     | X    |
  // |--------------------|-----------------------------------------------------------------------|----------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------|---------|------|------|-------|------|
  // | `0x28`             | Data byte has been transmitted; ACK has been received                 | Load data byte or No TWDR action | Data byte will be transmitted and ACK or NOT ACK will be received Repeated START will be transmitted STOP condition will be transmitted and TWSTO flag will be reset STOP condition followed by a START condition will be transmitted and TWSTO flag will be reset | -            | -       | 0/1  | 0/1  | 1     | X    |
  // | `0x30`             | Data byte has been transmitted; NOT ACK has been received             | Load data byte or No TWDR action | Data byte will be transmitted and ACK or NOT ACK will be received Repeated START will be transmitted STOP condition will be transmitted and TWSTO flag will be reset STOP condition followed by a START condition will be transmitted and TWSTO flag will be reset | -            | -       | 0/1  | 0/1  | 1     | X    |
  // | `0x38`             | Arbitration lost in SLA+W or data bytes                               | No TWDR action                   | 2-wire Serial Bus will be released and not addressed Slave mode entered A START condition will be transmitted when the bus becomes free                                                                                                                            | -            | -       | 0    | 1    | 1     | X    |

  public enum MasterTransmit: UInt8 {
    /// SLA+W has been transmitted; ACK has been received. Load data byte or No TWDR action or No TWDR action or No TWDR action. Data byte will be transmitted and ACK or NOT ACK will be received. Repeated START will be transmitted. STOP condition will be transmitted and TWSTO Flag will be reset. STOP condition followed by a START condition will be transmitted and TWSTO flag will be reset.
    case slaveAddressWriteTransmittedAndAckReceived = 0x18
    /// SLA+W has been transmitted; NOT ACK has been received. Load data byte or No TWDR action or No TWDR action or No TWDR action. Data byte will be transmitted and ACK or NOT ACK will be received. Repeated START will be transmitted. STOP condition will be transmitted and TWSTO flag will be reset. STOP condition followed by a START condition will be transmitted and TWSTO flag will be reset.
    case slaveAddressWriteTransmittedAndNotAckReceived = 0x20
    /// Data byte has been transmitted; ACK has been received. Load data byte or No TWDR action or No TWDR action or No TWDR action. Data byte will be transmitted and ACK or NOT ACK will be received. Repeated START will be transmitted. STOP condition will be transmitted and TWSTO flag will be reset. STOP condition followed by a START condition will be transmitted and TWSTO flag will be reset.
    case dataByteTransmittedAndAckReceived = 0x28
    /// Data byte has been transmitted; NOT ACK has been received. Load data byte or No TWDR action or No TWDR action or No TWDR action. Data byte will be transmitted and ACK or NOT ACK will be received. Repeated START will be transmitted. STOP condition will be transmitted and TWSTO flag will be reset. STOP condition followed by a START condition will be transmitted and TWSTO flag will be reset.
    case dataByteTransmittedAndNotAckReceived = 0x30
    /// Arbitration lost in SLA+W or data bytes. No TWDR action or No TWDR action. 2-wire Serial Bus will be released and not addressed. Slave mode entered. A START condition will be transmitted when the bus becomes free.
    case arbitrationLostInSlaveAddressOrDataBytes = 0x38
  }

  // | Status Code (TWSR) | Status of the 2-wire Serial Bus and 2-wire Serial Interface Hardware | Application Software Response                      | Next Action Taken by TWI Hardware                                                                                                                                                                  | To/from TWDR | To TWCR | STA | STO | TWINT | TWEA |
  // |--------------------|----------------------------------------------------------------------|----------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------|---------|-----|-----|-------|------|
  // | 0x38               | Arbitration lost in SLA+R or NOT ACK bit                             | No TWDR action or No TWDR action                   | 2-wire serial bus will be released and not addressed; slave mode will be entered; A START condition will be transmitted when the bus becomes free                                                  | -            | -       | 0   | 1   | 1     | X    |
  // | 0x40               | SLA+R has been transmitted; ACK has been received                    | No TWDR action or No TWDR action                   | Data byte will be received and NOT ACK will be returned; Data byte will be received and ACK will be returned                                                                                       | -            | -       | 0   | 0   | 1     | 0/1  |
  // | 0x48               | SLA+R has been transmitted; NOT ACK has been received                | No TWDR action or No TWDR action or No TWDR action | Repeated START will be transmitted; STOP condition will be transmitted and TWSTO flag will be reset; STOP condition followed by a START condition will be transmitted and TWSTO flag will be reset | -            | -       | 1   | 0   | 1     | X    |
  // | 0x50               | Data byte has been received; ACK has been returned                   | Read data byte or Read data byte                   | Data byte will be received and NOT ACK will be returned; Data byte will be received and ACK will be returned                                                                                       | -            | -       | 0   | 0   | 1     | 0/1  |
  // | 0x58               | Data byte has been received; NOT ACK has been returned               | Read data byte or Read data byte or Read data byte | Repeated START will be transmitted; STOP condition will be transmitted and TWSTO flag will be reset; STOP condition followed by a START condition will be transmitted and TWSTO flag will be reset | -            | -       | 1   | 0   | 1     | X    |

  /// A list of statuses for Master Receive mode.
  public enum MasterReceive: UInt8 {
    /// Arbitration lost in SLA+R or NOT ACK bit. No TWDR action or No TWDR action. 2-wire serial bus will be released and not addressed; slave mode will be entered; A START condition will be transmitted when the bus becomes free.
    case arbitrationLostInSlaveAddressOrNotAckBit = 0x38
    /// SLA+R has been transmitted; ACK has been received. No TWDR action or No TWDR action. Data byte will be received and NOT ACK will be returned; Data byte will be received and ACK will be returned.
    case slaveAddressReadTransmittedAndAckReceived = 0x40
    /// SLA+R has been transmitted; NOT ACK has been received. No TWDR action or No TWDR action or No TWDR action. Repeated START will be transmitted; STOP condition will be transmitted and TWSTO flag will be reset; STOP condition followed by a START condition will be transmitted and TWSTO flag will be reset.
    case slaveAddressReadTransmittedAndNotAckReceived = 0x48
    /// Data byte has been received; ACK has been returned. Read data byte or Read data byte. Data byte will be received and NOT ACK will be returned. Data byte will be received and ACK will be returned.
    case dataByteReceivedAndAckReturned = 0x50
    /// Data byte has been received; NOT ACK has been returned. Read data byte or Read data byte or Read data byte. Repeated START will be transmitted. STOP condition will be transmitted and TWSTO flag will be reset. STOP condition followed by a START condition will be transmitted and TWSTO flag will be reset.
    case dataByteReceivedAndNotAckReturned = 0x58
  }
}

// | Status Code (TWSR) | Status of the 2-wire Serial Bus and 2-wire Serial Interface Hardware | Application Software Response | Next Action Taken by TWI Hardware | To/from TWDR | To TWCR | STA | STO | TWINT | TWEA |
// |-------------------|-----------------------------------------------------------------------|-------------------------------|----------------------------------|-------------|--------|-----|-----|-------|------|
// | 0x60 | Own SLA+W has been received; ACK has been returned | No TWDR action or No TWDR action | Data byte will be received and NOT ACK will be returned Data byte will be received and ACK will be returned | X | X | 0 | 0 | 1 | 0/1 |
// | 0x68 | Arbitration lost in SLA+R/W as Master; own SLA+W has been received; ACK has been returned | No TWDR action or No TWDR action | Data byte will be received and NOT ACK will be returned Data byte will be received and ACK will be returned | X | X | 0 | 0 | 1 | 0/1 |
// | 0x70 | General call address has been received; ACK has been returned | No TWDR action or No TWDR action | Data byte will be received and NOT ACK will be returned Data byte will be received and ACK will be returned | X | X | 0 | 0 | 1 | 0/1 |
// | 0x78 | Arbitration lost in SLA+R/W as Master; General call address has been received; ACK has been returned | No TWDR action or No TWDR action | Data byte will be received and NOT ACK will be returned Data byte will be received and ACK will be returned | X | X | 0 | 0 | 1 | 0/1 |
// | 0x80 | Previously addressed with own SLA+W; data has been received; ACK has been returned | Read data byte or Read data byte | Data byte will be received and NOT ACK will be returned Data byte will be received and ACK will be returned | X | X | 0 | 0 | 1 | 0/1 |
// | 0x88 | Previously addressed with own SLA+W; data has been received; NOT ACK has been returned | Read data byte or Read data byte or Read data byte or Read data byte | Switched to the not addressed Slave mode; no recognition of own SLA or GCA Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1” Switched to the not addressed Slave mode; no recognition of own SLA or GCA; a START condition will be transmitted when the bus becomes free Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1”; a START condition will be transmitted when the bus becomes free | - | - | 0 | 0 | 1 | 0/1 |
// | 0x90 | Previously addressed with general call; data has been received; ACK has been returned | Read data byte or Read data byte | Data byte will be received and NOT ACK will be returned Data byte will be received and ACK will be returned | X | X | 0 | 0 | 1 | 0/1 |
// | 0x98 | Previously addressed with general call; data has been received; NOT ACK has been returned | Read data byte or Read data byte or Read data byte or Read data byte | Switched to the not addressed Slave mode; no recognition of own SLA or GCA Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1” Switched to the not addressed Slave mode; no recognition of own SLA or GCA; a START condition will be transmitted when the bus becomes free Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1”; a START condition will be transmitted when the bus becomes free | - | - | 0 | 0 | 1 | 0/1 |
// | 0xA0 | A STOP condition or repeated START condition has been received while still addressed as slave | No action | Switched to the not addressed Slave mode; no recognition of own SLA or GCA Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1” Switched to the not addressed Slave mode; no recognition of own SLA or GCA; a START condition will be transmitted when the bus becomes free Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1”; a START condition will be transmitted when the bus becomes free | - | - | 0 | 0 | 1 | 0/1 |

extension TwiStatus {
  public enum SlaveReceive: UInt8 {
    /// Own SLA+W has been received; ACK has been returned. Data byte will be received and NOT ACK will be returned. Data byte will be received and ACK will be returned.
    case ownSlaveAddressReceivedAndAckReturned = 0x60
    /// Arbitration lost in SLA+R/W as Master; own SLA+W has been received; ACK has been returned. Data byte will be received and NOT ACK will be returned. Data byte will be received and ACK will be returned.
    case arbitrationLostInSlaveAddressOrNotAckBitOwnSlaveAddressReceived = 0x68
    /// General call address has been received; ACK has been returned. Data byte will be received and NOT ACK will be returned. Data byte will be received and ACK will be returned.
    case generalCallAddressReceivedAndAckReturned = 0x70
    /// Arbitration lost in SLA+R/W as Master; General call address has been received; ACK has been returned. Data byte will be received and NOT ACK will be returned. Data byte will be received and ACK will be returned.
    case arbitrationLostInSlaveAddressOrNotAckBitGeneralCallAddressReceived = 0x78
    /// Previously addressed with own SLA+W; data has been received; ACK has been returned. Read data byte or Read data byte. Data byte will be received and NOT ACK will be returned. Data byte will be received and ACK will be returned.
    case previouslyAddressedWithOwnSlaveAddressAndDataReceivedAndAckReturned = 0x80
    /// Previously addressed with own SLA+W; data has been received; NOT ACK has been returned. Read data byte or Read data byte or Read data byte or Read data byte. Switched to the not addressed Slave mode; no recognition of own SLA or GCA. Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1”. Switched to the not addressed Slave mode; no recognition of own SLA or GCA; a START condition will be transmitted when the bus becomes free. Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1”; a START condition will be transmitted when the bus becomes free.
    case previouslyAddressedWithOwnSlaveAddressAndDataReceivedAndNotAckReturned = 0x88
    /// Previously addressed with general call; data has been received; ACK has been returned. Read data byte or Read data byte. Data byte will be received and NOT ACK will be returned. Data byte will be received and ACK will be returned.
    case previouslyAddressedWithGeneralCallAndDataReceivedAndAckReturned = 0x90
    /// Previously addressed with general call; data has been received; NOT ACK has been returned. Read data byte or Read data byte or Read data byte or Read data byte. Switched to the not addressed Slave mode; no recognition of own SLA or GCA. Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1”. Switched to the not addressed Slave mode; no recognition of own SLA or GCA; a START condition will be transmitted when the bus becomes free. Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1”; a START condition will be transmitted when the bus becomes free.
    case previouslyAddressedWithGeneralCallAndDataReceivedAndNotAckReturned = 0x98
    /// A STOP condition or repeated START condition has been received while still addressed as slave. No action. Switched to the not addressed Slave mode; no recognition of own SLA or GCA. Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1”. Switched to the not addressed Slave mode; no recognition of own SLA or GCA; a START condition will be transmitted when the bus becomes free. Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1”; a START condition will be transmitted when the bus becomes free.
    case stopConditionOrRepeatedStartConditionReceivedWhileStillAddressedAsSlave = 0xA0
  }
}

// | Status Code (TWSR) | Status of the 2-wire Serial Bus and 2-wire Serial Interface Hardware | Application Software Response | Next Action Taken by TWI Hardware | To/from TWDR | To TWCR | STA | STO | TWINT | TWEA |
// |--------------------|-----------------------------------------------------------------------|-------------------------------|----------------------------------|--------------|---------|-----|-----|-------|------|
// | 0xA8 | Own SLA+R has been received; ACK has been returned | Load data byte or Load data byte | Last data byte will be transmitted and NOT ACK should be received Data byte will be transmitted and ACK should be received | X | X | 0 | 0 | 1 | 1 |
// | 0xB0 | Arbitration lost in SLA+R/W as Master; own SLA+R has been received; ACK has been returned | Load data byte or Load data byte | Last data byte will be transmitted and NOT ACK should be received Data byte will be transmitted and ACK should be received | X | X | 0 | 0 | 1 | 1 |
// | 0xB8 | Data byte in TWDR has been transmitted; ACK has been received | Load data byte or Load data byte | Last data byte will be transmitted and NOT ACK should be received Data byte will be transmitted and ACK should be received | X | X | 0 | 0 | 1 | 1 |
// | 0xC0 | Data byte in TWDR has been transmitted; NOT ACK has been received | No TWDR action or No TWDR action or No TWDR action or No TWDR action | Switched to the not addressed Slave mode; no recognition of own SLA or GCA Switched to the not addressed slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1” Switched to the not addressed Slave mode; no recognition of own SLA or GCA; a START condition will be transmitted when the bus becomes free Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1”; a START condition will be transmitted when the bus becomes free | 0 | 0 | 1 | 1 | 0 | 0 |
// | 0xC8 | Last data byte in TWDR has been transmitted (TWEA = “0”); ACK has been received | No TWDR action or No TWDR action or No TWDR action or No TWDR action | Switched to the not addressed slave mode; no recognition of own SLA or GCA Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1” Switched to the not addressed Slave mode; no recognition of own SLA or GCA; a START condition will be transmitted when the bus becomes free Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1”; a START condition will be transmitted when the bus becomes free | 0 | 0 | 1 | 1 | 0 | 0 |

extension TwiStatus {
  public enum SlaveTransmit: UInt8 {
    /// Own SLA+W has been received; ACK has been returned. Data byte will be transmitted and ACK should be received.
    case ownSlaveAddressReceivedAndAckReturned = 0xA8
    /// Arbitration lost in SLA+R/W as Master; own SLA+W has been received; ACK has been returned. Data byte will be transmitted and ACK should be received.
    case arbitrationLostInSlaveAddressOrNotAckBit = 0xB0
    /// Data byte in TWDR has been transmitted; ACK has been received. Data byte will be transmitted and ACK should be received.
    case dataByteInTWDRHasBeenTransmittedAndAckReceived = 0xB8
    /// Data byte in TWDR has been transmitted; NOT ACK has been received. Switched to the not addressed Slave mode; no recognition of own SLA or GCA. Switched to the not addressed slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1”. Switched to the not addressed Slave mode; no recognition of own SLA or GCA; a START condition will be transmitted when the bus becomes free. Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1”; a START condition will be transmitted when the bus becomes free.
    case dataByteInTWDRHasBeenTransmittedAndNotAckReceived = 0xC0
    /// Last data byte in TWDR has been transmitted (TWEA = “0”); ACK has been received. Switched to the not addressed slave mode; no recognition of own SLA or GCA. Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1”. Switched to the not addressed Slave mode; no recognition of own SLA or GCA; a START condition will be transmitted when the bus becomes free. Switched to the not addressed Slave mode; own SLA will be recognized; GCA will be recognized if TWGCE = “1”; a START condition will be transmitted when the bus becomes free.
    case lastDataByteInTWDRHasBeenTransmittedAndAckReceived = 0xC8
  }
}
